{"version":3,"sources":["utils/utils.js","components/common/RenderLoader/RenderLoader.js","components/common/CustomTable/NewRow.js","components/common/ContextMenuComp/ContextMenuComp.js","components/common/CustomTable/CustomTable.js","services/errors.js","services/services.js","components/views/AssetsPage/AssetsPage.js"],"names":["getObjectKeys","obj","Object","keys","getLastItem","path","substring","lastIndexOf","RenderLoader","text","NewRow","headers","onSubmit","data","useState","newRow","setNewRow","handleOnChange","e","persist","prevState","target","name","value","map","property","index","key","className","onChange","onClick","ContextMenuComp","row","disable","id","collect","props","rowId","d","console","log","CustomTable","addColumn","disableContextMenu","dataTable","setDatatable","header","to","process","NetworkError","Error","ServerError","NotFoundError","BASE_URL","getAssets","a","fetch","response","ok","handleError","status","json","assets","getEntities","lastParam","entities","filter","item","id_asset","parseInt","AssetsPage","setAssets","hasErrors","errorState","setErrorState","err","message","useEffect","then","catch","length"],"mappings":"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","file":"static/js/4.caaf1631.chunk.js","sourcesContent":["/*Util functions to reuse*/\r\n\r\nexport function getObjectKeys(obj) {\r\n  return Object.keys(obj);\r\n}\r\n\r\nexport function getLastItem(path) {\r\n  return path.substring(path.lastIndexOf('/') + 1);\r\n}","import React from 'react';\r\n\r\nconst RenderLoader = ({text}) => <p>{text}</p>;\r\nexport default RenderLoader;\r\n","import React, { useState } from 'react';\r\n\r\n  function NewRow({headers, data, onSubmit}){\r\n    const [newRow, setNewRow] = useState({});\r\n\r\n    function handleOnChange(e){\r\n      e.persist();\r\n      setNewRow((prevState) => ({\r\n        ...prevState,\r\n        [e.target.name]: e.target.value,\r\n      }))\r\n    }\r\n\r\n    function onRowSubmit(){\r\n      onSubmit(newRow);\r\n      setNewRow({});\r\n    }\r\n\r\n    return (\r\n      <tr>\r\n        {headers.map((property, index) => (\r\n          <td key={index} className=\"td-padding\"><input name={property} onChange={handleOnChange} value={newRow[property] || ''}/></td>\r\n        ))}\r\n        <td><button className=\"table-button button-hover\" onClick={onRowSubmit}>Submit</button></td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\nexport default NewRow;\r\n","import React from 'react';\r\nimport './ContextMenuComp.css';\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\n  function ContextMenuComp({row, property, disable}){\r\n\r\n    return (\r\n      <>\r\n        <ContextMenuTrigger id=\"context-menu-table\" collect={props => props} rowId={row.id} disable={disable}>\r\n          <div className=\"td-padding\">{row[property]}</div>\r\n        </ContextMenuTrigger>\r\n        <ContextMenu id=\"context-menu-table\">  \r\n          <MenuItem onClick={(e, d) => console.log(d.rowId)}>\r\n            Test \r\n          </MenuItem>\r\n        </ContextMenu>\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default ContextMenuComp;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport NewRow from './NewRow';\r\nimport './CustomTable.css';\r\nimport ContextMenuComp from '../ContextMenuComp/ContextMenuComp';\r\n\r\nconst publicURL = process.env.PUBLIC_URL;\r\n\r\nfunction CustomTable({headers, data, addColumn, disableContextMenu}) {\r\n  const [dataTable, setDatatable] = useState([...data]);\r\n\r\n  function onSubmit(newRow) {\r\n    setDatatable([newRow, ...dataTable]);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"parentTable\">\r\n      <table id=\"customTable\">\r\n        <thead>\r\n          <tr>\r\n            <>\r\n              {headers.map((name, index) => (<th key={index} className=\"td-padding\">{name}</th>))}\r\n              {addColumn && <th>{addColumn.header}</th>}\r\n            </>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <>\r\n            <NewRow headers={headers} data={dataTable} onSubmit={onSubmit}/>\r\n            {dataTable.map((row) => (\r\n                <tr key={row.id}>\r\n                  <>\r\n                    {headers.map((property, index) => (\r\n                      <td key={index}>\r\n                        <ContextMenuComp \r\n                          row={row}\r\n                          property={property} \r\n                          disable={disableContextMenu}/>\r\n                      </td>\r\n                    ))}\r\n                    {addColumn && \r\n                      <td>\r\n                        <button className=\"table-button td-padding\"><Link to={`${publicURL}/entities/${row.id}`}>Related entities</Link></button>\r\n                      </td>}   \r\n                  </>\r\n                </tr>\r\n              ))}            \r\n          </>  \r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomTable;\r\n","// Create an error for the Network error\r\nexport class NetworkError extends Error {\r\n  constructor() {\r\n    super(\"There was a network error. Please try again in a few seconds.\");\r\n  }\r\n}\r\n\r\n// Create an error for the Server error\r\nexport class ServerError extends Error {\r\n  constructor() {\r\n    super(\"There was a server error.\");\r\n  }\r\n}\r\n\r\n// Create an error for the not found error\r\nexport class NotFoundError extends Error {\r\n  constructor() {\r\n    super('The requested resource was a not found.');\r\n  }\r\n}\r\n","import { NetworkError, ServerError, NotFoundError } from './errors';\r\n\r\nconst BASE_URL=\"https://cors-anywhere.herokuapp.com/https://6y458uslg3.execute-api.eu-west-3.amazonaws.com/elixos\";\r\n\r\nexport async function getAssets() {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/assets`);\r\n        if (!response.ok) {\r\n            return handleError(response.status);\r\n        }\r\n        const { assets } = await response.json();\r\n        return assets;\r\n    } catch (err) {\r\n        if (err instanceof ServerError || err instanceof NotFoundError) {\r\n            throw err;\r\n          }\r\n        throw new NetworkError();\r\n    }\r\n}\r\n\r\nexport async function getEntities(lastParam) {\r\n  try {\r\n      const response = await fetch(`${BASE_URL}/entities`);\r\n      if (!response.ok) {\r\n          return handleError(response.status);\r\n      }\r\n      const { entities } = await response.json();\r\n      if(lastParam === 'entities') {\r\n        return entities;\r\n      } else { \r\n        return entities.filter(item => item.id_asset === parseInt(lastParam)); }\r\n     \r\n  } catch (err) {\r\n      if (err instanceof ServerError || err instanceof NotFoundError) {\r\n          throw err;\r\n        }\r\n      throw new NetworkError();\r\n  }\r\n}\r\n\r\n\r\n// Handle HTTP Error\r\nfunction handleError(status) {\r\n  if (status === 500) {\r\n    throw new ServerError();\r\n  }\r\n\r\n  if (status === 404) {\r\n      throw new NotFoundError();\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getAssets } from '../../../services/services';\r\nimport { getObjectKeys } from '../../../utils/utils';\r\nimport RenderLoader from '../../common/RenderLoader/RenderLoader';\r\nimport CustomTable from '../../common/CustomTable/CustomTable';\r\n\r\nfunction AssetsPage() {\r\n  const [assets, setAssets] = useState();\r\n  const [errorState, setErrorState] = useState({ hasErrors: false });\r\n\r\n  useEffect(() => {\r\n    getAssets().then(setAssets).catch(handleError);\r\n  }, []);\r\n\r\n  function handleError(err) {\r\n    setErrorState({ hasErrors: true, message: err.message });\r\n  }\r\n\r\n  return (\r\n      <>\r\n        <h2>Assets</h2>  \r\n        {errorState.hasErrors ? \r\n          <div>{errorState.message}</div>\r\n          :\r\n          assets ? \r\n            <CustomTable \r\n              headers={getObjectKeys(assets.length && assets[0])}\r\n              data={assets} \r\n              addColumn={true}\r\n              disableContextMenu={true}/>\r\n            :\r\n            <RenderLoader text=\"Wait I'm loading assets for you\"/>\r\n          } \r\n      </>\r\n  );\r\n}\r\n\r\nexport default AssetsPage;\r\n"],"sourceRoot":""}