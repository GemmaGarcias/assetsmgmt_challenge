{"version":3,"sources":["components/common/Navbar/MenuData.js","components/common/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["MenuData","title","path","active","cName","Navbar","location","useLocation","useState","menu","setMenu","useEffect","pathname","map","item","i","includes","process","className","key","to","AssetsPage","lazy","EntitiesPage","publicURL","App","fallback","exact","from","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAAaA,EAAW,CACtB,CACEC,MAAO,SACPC,KAAM,UACNC,QAAQ,EACRC,MAAO,YAET,CACEH,MAAO,WACPC,KAAM,YACNC,QAAQ,EACRC,MAAO,a,MCuBIC,MA3Bf,WACE,IAAIC,EAAWC,cADC,EAEQC,mBAAS,YAAIR,IAFrB,mBAETS,EAFS,KAEHC,EAFG,KAchB,OAJAC,qBAAU,WANV,IAA0BT,EAOxBQ,GAPwBR,EAOCI,EAASM,SAN3BH,EAAKI,KAAI,SAACC,EAAMC,GAErB,OADGb,EAAKc,SAAL,UARSC,yBAQT,OAA6BH,EAAKZ,OAAUY,EAAKX,QAAS,EAAeW,EAAKX,QAAS,EACnFW,SAKT,CAACR,EAASM,WAGV,yBAAKM,UAAW,YACd,wBAAIA,UAAU,kBACXT,EAAKI,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAII,IAAKJ,EAAGG,UAAWJ,EAAKV,OAC1B,kBAAC,IAAD,CAAMc,UAAWJ,EAAKX,OAAS,SAAW,KAAMiB,GAAE,UArB5CH,yBAqB4C,OAAiBH,EAAKZ,OAASY,EAAKb,cCrB5FoB,EAAaC,gBAAK,kBAAM,sDACxBC,EAAeD,gBAAK,kBAAM,sDAE1BE,EAAYP,wBAoBHQ,MAlBf,WAEE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUQ,SAJa,uCAKrB,yBAAKR,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUS,OAAK,EAACC,KAAI,UAAKJ,GAAaJ,GAAE,UAAKI,EAAL,aACxC,kBAAC,IAAD,CAAOG,OAAK,EAACzB,KAAI,UAAKsB,EAAL,WAAyBK,UAAWR,IACrD,kBAAC,IAAD,CAAOnB,KAAI,UAAKsB,EAAL,aAA2BK,UAAWN,SCRzCO,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,QAGNC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7cea558.chunk.js","sourcesContent":["export const MenuData = [\r\n  {\r\n    title: 'Assets',\r\n    path: '/assets',\r\n    active: true,\r\n    cName: 'nav-text'\r\n  },\r\n  {\r\n    title: 'Entities',\r\n    path: '/entities',\r\n    active: false,\r\n    cName: 'nav-text'\r\n  }\r\n]\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { MenuData } from './MenuData';\r\nimport './Navbar.css';\r\n\r\nconst publicURL = process.env.PUBLIC_URL;\r\n\r\nfunction Navbar() {\r\n  let location = useLocation();\r\n  const [menu, setMenu] = useState([...MenuData]);\r\n\r\n  function updateActiveMenu(path) {\r\n    return menu.map((item, i) => {\r\n      if(path.includes(`${publicURL}${item.path}`)){ item.active = true; } else { item.active = false; }\r\n      return item;})\r\n  }\r\n\r\n  useEffect(() => {\r\n    setMenu(updateActiveMenu(location.pathname))\r\n  },[location.pathname]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <nav className={\"nav-menu\"}>\r\n      <ul className=\"nav-menu-items\">\r\n        {menu.map((item, i) => (\r\n          <li key={i} className={item.cName}>\r\n            <Link className={item.active ? \"active\" : null} to={`${publicURL}${item.path}`}>{item.title}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from './components/common/Navbar/Navbar';\r\n\r\nconst AssetsPage = lazy(() => import('./components/views/AssetsPage/AssetsPage'));\r\nconst EntitiesPage = lazy(() => import('./components/views/EntitiesPage/EntitiesPage'));\r\n\r\nconst publicURL = process.env.PUBLIC_URL;\r\n\r\nfunction App() {\r\n  const renderLoader = () => <p>Loading</p>;\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Suspense fallback={renderLoader()}>\r\n        <div className=\"container\">\r\n          <Switch>\r\n            <Redirect exact from={`${publicURL}`} to={`${publicURL}/assets`}/>\r\n            <Route exact path={`${publicURL}/assets`} component={AssetsPage} />\r\n            <Route path={`${publicURL}/entities`} component={EntitiesPage} />\r\n          </Switch>\r\n        </div>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(  \r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}